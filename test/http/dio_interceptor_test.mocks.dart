// Mocks generated by Mockito 5.1.0 from annotations
// in truvideo_enterprise/test/http/dio_interceptor_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dio/src/dio_error.dart' as _i7;
import 'package:dio/src/dio_mixin.dart' as _i2;
import 'package:dio/src/response.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:truvideo_enterprise/service/log_event/_interface.dart' as _i3;
import 'package:truvideo_enterprise/service/log_event/model/level.dart' as _i6;
import 'package:truvideo_enterprise/service/log_event/model/module.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeInterceptorState_0<T> extends _i1.Fake
    implements _i2.InterceptorState<T> {}

/// A class which mocks [LogEventService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogEventService extends _i1.Mock implements _i3.LogEventService {
  MockLogEventService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> logScreen(String? screenName) =>
      (super.noSuchMethod(Invocation.method(#logScreen, [screenName]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> logEvent(_i5.LogEventModule? module,
          {String? action = r'',
          _i6.LogEventLevel? level,
          String? message = r'',
          String? raw = r'',
          int? orderID}) =>
      (super.noSuchMethod(
          Invocation.method(#logEvent, [
            module
          ], {
            #action: action,
            #level: level,
            #message: message,
            #raw: raw,
            #orderID: orderID
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> processLog(_i5.LogEventModule? module,
          {String? action = r'',
          _i6.LogEventLevel? level,
          String? message = r'',
          String? raw = r'',
          int? orderID}) =>
      (super.noSuchMethod(
          Invocation.method(#processLog, [
            module
          ], {
            #action: action,
            #level: level,
            #message: message,
            #raw: raw,
            #orderID: orderID
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> logEventError(Exception? err, StackTrace? stackTrace) =>
      (super.noSuchMethod(Invocation.method(#logEventError, [err, stackTrace]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}

/// A class which mocks [ErrorInterceptorHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockErrorInterceptorHandler extends _i1.Mock
    implements _i2.ErrorInterceptorHandler {
  MockErrorInterceptorHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.InterceptorState<dynamic>> get future =>
      (super.noSuchMethod(Invocation.getter(#future),
              returnValue: Future<_i2.InterceptorState<dynamic>>.value(
                  _FakeInterceptorState_0<dynamic>()))
          as _i4.Future<_i2.InterceptorState<dynamic>>);
  @override
  bool get isCompleted =>
      (super.noSuchMethod(Invocation.getter(#isCompleted), returnValue: false)
          as bool);
  @override
  void next(_i7.DioError? err) =>
      super.noSuchMethod(Invocation.method(#next, [err]),
          returnValueForMissingStub: null);
  @override
  void resolve(_i8.Response<dynamic>? response) =>
      super.noSuchMethod(Invocation.method(#resolve, [response]),
          returnValueForMissingStub: null);
  @override
  void reject(_i7.DioError? error) =>
      super.noSuchMethod(Invocation.method(#reject, [error]),
          returnValueForMissingStub: null);
}
