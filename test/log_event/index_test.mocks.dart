// Mocks generated by Mockito 5.1.0 from annotations
// in truvideo_enterprise/test/log_event/index_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;

import 'package:firebase_analytics/firebase_analytics.dart' as _i18;
import 'package:firebase_analytics_platform_interface/firebase_analytics_platform_interface.dart'
    as _i19;
import 'package:firebase_core/firebase_core.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:truvideo_enterprise/model/dealer_code_access_history.dart'
    as _i12;
import 'package:truvideo_enterprise/model/dealer_info.dart' as _i11;
import 'package:truvideo_enterprise/model/device_info.dart' as _i4;
import 'package:truvideo_enterprise/model/offline_enqueue/offline_enqueue_item.dart'
    as _i5;
import 'package:truvideo_enterprise/model/offline_enqueue/offline_enqueue_item_status.dart'
    as _i17;
import 'package:truvideo_enterprise/model/offline_enqueue/offline_enqueue_item_type.dart'
    as _i16;
import 'package:truvideo_enterprise/model/user.dart' as _i10;
import 'package:truvideo_enterprise/model/user_login.dart' as _i3;
import 'package:truvideo_enterprise/model/user_settings.dart' as _i13;
import 'package:truvideo_enterprise/service/auth/_interface.dart' as _i9;
import 'package:truvideo_enterprise/service/device/_interface.dart' as _i14;
import 'package:truvideo_enterprise/service/http/_interface.dart' as _i7;
import 'package:truvideo_enterprise/service/http/model/response.dart' as _i2;
import 'package:truvideo_enterprise/service/offline_enqueue_service/_interface.dart'
    as _i15;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeHttpResponseModel_0 extends _i1.Fake
    implements _i2.HttpResponseModel {}

class _FakeUserLoginModel_1 extends _i1.Fake implements _i3.UserLoginModel {}

class _FakeDeviceInfoModel_2 extends _i1.Fake implements _i4.DeviceInfoModel {}

class _FakeOfflineEnqueueItemModel_3 extends _i1.Fake
    implements _i5.OfflineEnqueueItemModel {}

class _FakeFirebaseApp_4 extends _i1.Fake implements _i6.FirebaseApp {}

/// A class which mocks [HttpService].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpService extends _i1.Mock implements _i7.HttpService {
  MockHttpService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.HttpResponseModel> get(Uri? uri,
          {Map<String, dynamic>? headers = const {},
          Map<String, dynamic>? params = const {}}) =>
      (super.noSuchMethod(
          Invocation.method(#get, [uri], {#headers: headers, #params: params}),
          returnValue: Future<_i2.HttpResponseModel>.value(
              _FakeHttpResponseModel_0())) as _i8
          .Future<_i2.HttpResponseModel>);
  @override
  _i8.Future<_i2.HttpResponseModel> put(Uri? uri,
          {Map<String, dynamic>? headers = const {},
          Map<String, dynamic>? params = const {},
          dynamic data}) =>
      (super.noSuchMethod(
          Invocation.method(
              #put, [uri], {#headers: headers, #params: params, #data: data}),
          returnValue: Future<_i2.HttpResponseModel>.value(
              _FakeHttpResponseModel_0())) as _i8
          .Future<_i2.HttpResponseModel>);
  @override
  _i8.Future<_i2.HttpResponseModel> post(Uri? uri,
          {Map<String, dynamic>? headers = const {},
          Map<String, dynamic>? params = const {},
          dynamic data}) =>
      (super.noSuchMethod(
          Invocation.method(
              #post, [uri], {#headers: headers, #params: params, #data: data}),
          returnValue: Future<_i2.HttpResponseModel>.value(
              _FakeHttpResponseModel_0())) as _i8
          .Future<_i2.HttpResponseModel>);
  @override
  _i8.Future<_i2.HttpResponseModel> delete(Uri? uri,
          {Map<String, dynamic>? headers = const {},
          Map<String, dynamic>? params = const {}}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #delete, [uri], {#headers: headers, #params: params}),
              returnValue: Future<_i2.HttpResponseModel>.value(
                  _FakeHttpResponseModel_0()))
          as _i8.Future<_i2.HttpResponseModel>);
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i9.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i10.UserModel?> getCachedLoggedUser() =>
      (super.noSuchMethod(Invocation.method(#getCachedLoggedUser, []),
              returnValue: Future<_i10.UserModel?>.value())
          as _i8.Future<_i10.UserModel?>);
  @override
  _i8.Future<_i10.UserModel?> isLogin() =>
      (super.noSuchMethod(Invocation.method(#isLogin, []),
              returnValue: Future<_i10.UserModel?>.value())
          as _i8.Future<_i10.UserModel?>);
  @override
  _i8.Future<_i9.LoginResult> login(
          {String? dealerCode,
          String? userUuid,
          String? pin,
          bool? validateOnly = false}) =>
      (super.noSuchMethod(
              Invocation.method(#login, [], {
                #dealerCode: dealerCode,
                #userUuid: userUuid,
                #pin: pin,
                #validateOnly: validateOnly
              }),
              returnValue:
                  Future<_i9.LoginResult>.value(_i9.LoginResult.success))
          as _i8.Future<_i9.LoginResult>);
  @override
  _i8.Future<void> logout() =>
      (super.noSuchMethod(Invocation.method(#logout, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<_i11.DealerInfoModel?> getDealerInfo(String? dealerCode) =>
      (super.noSuchMethod(Invocation.method(#getDealerInfo, [dealerCode]),
              returnValue: Future<_i11.DealerInfoModel?>.value())
          as _i8.Future<_i11.DealerInfoModel?>);
  @override
  _i8.Future<List<_i3.UserLoginModel>> getUsersForDealerCode(
          String? dealerCode) =>
      (super.noSuchMethod(
          Invocation.method(#getUsersForDealerCode, [dealerCode]),
          returnValue: Future<List<_i3.UserLoginModel>>.value(
              <_i3.UserLoginModel>[])) as _i8.Future<List<_i3.UserLoginModel>>);
  @override
  String getStoredDealerCode() =>
      (super.noSuchMethod(Invocation.method(#getStoredDealerCode, []),
          returnValue: '') as String);
  @override
  _i8.Future<void> storeDealerCode(String? dealerCode) =>
      (super.noSuchMethod(Invocation.method(#storeDealerCode, [dealerCode]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> clearDealerCode() =>
      (super.noSuchMethod(Invocation.method(#clearDealerCode, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> deleteLastAccessDate(String? userUid) =>
      (super.noSuchMethod(Invocation.method(#deleteLastAccessDate, [userUid]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  DateTime? getLastAccessDate(String? userUid) =>
      (super.noSuchMethod(Invocation.method(#getLastAccessDate, [userUid]))
          as DateTime?);
  @override
  _i8.Future<_i3.UserLoginModel> create(
          {String? dealerCode,
          String? firstName,
          String? lastName,
          String? pin,
          String? title,
          String? publicDealerUuid,
          String? email,
          String? username,
          String? password,
          String? mobileNumber,
          String? integrationId}) =>
      (super.noSuchMethod(
              Invocation.method(#create, [], {
                #dealerCode: dealerCode,
                #firstName: firstName,
                #lastName: lastName,
                #pin: pin,
                #title: title,
                #publicDealerUuid: publicDealerUuid,
                #email: email,
                #username: username,
                #password: password,
                #mobileNumber: mobileNumber,
                #integrationId: integrationId
              }),
              returnValue:
                  Future<_i3.UserLoginModel>.value(_FakeUserLoginModel_1()))
          as _i8.Future<_i3.UserLoginModel>);
  @override
  _i8.Stream<List<_i12.DealerCodeAccessHistoryModel>>
      streamDealerCodesHistory() =>
          (super.noSuchMethod(Invocation.method(#streamDealerCodesHistory, []),
                  returnValue:
                      Stream<List<_i12.DealerCodeAccessHistoryModel>>.empty())
              as _i8.Stream<List<_i12.DealerCodeAccessHistoryModel>>);
  @override
  _i8.Future<List<_i12.DealerCodeAccessHistoryModel>> getDealerCodesHistory() =>
      (super.noSuchMethod(Invocation.method(#getDealerCodesHistory, []),
          returnValue: Future<List<_i12.DealerCodeAccessHistoryModel>>.value(
              <_i12.DealerCodeAccessHistoryModel>[])) as _i8
          .Future<List<_i12.DealerCodeAccessHistoryModel>>);
  @override
  _i8.Future<void> validateUsernameEmail({String? email, String? username}) =>
      (super.noSuchMethod(
          Invocation.method(
              #validateUsernameEmail, [], {#email: email, #username: username}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<_i10.UserModel?> getMyProfile() =>
      (super.noSuchMethod(Invocation.method(#getMyProfile, []),
              returnValue: Future<_i10.UserModel?>.value())
          as _i8.Future<_i10.UserModel?>);
  @override
  _i8.Future<List<_i13.UserSettingsModel>> getUserSettings() =>
      (super.noSuchMethod(Invocation.method(#getUserSettings, []),
              returnValue: Future<List<_i13.UserSettingsModel>>.value(
                  <_i13.UserSettingsModel>[]))
          as _i8.Future<List<_i13.UserSettingsModel>>);
  @override
  _i8.Future<List<_i13.UserSettingsModel>?> getCachedUserSettings() =>
      (super.noSuchMethod(Invocation.method(#getCachedUserSettings, []),
              returnValue: Future<List<_i13.UserSettingsModel>?>.value())
          as _i8.Future<List<_i13.UserSettingsModel>?>);
}

/// A class which mocks [DeviceService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceService extends _i1.Mock implements _i14.DeviceService {
  MockDeviceService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i4.DeviceInfoModel> getInfo() =>
      (super.noSuchMethod(Invocation.method(#getInfo, []),
              returnValue:
                  Future<_i4.DeviceInfoModel>.value(_FakeDeviceInfoModel_2()))
          as _i8.Future<_i4.DeviceInfoModel>);
  @override
  _i8.Future<String> getBatteryLevel() =>
      (super.noSuchMethod(Invocation.method(#getBatteryLevel, []),
          returnValue: Future<String>.value('')) as _i8.Future<String>);
  @override
  _i8.Future<String> getPackageVersion() =>
      (super.noSuchMethod(Invocation.method(#getPackageVersion, []),
          returnValue: Future<String>.value('')) as _i8.Future<String>);
  @override
  _i8.Future<String> getPackageBuildNumber() =>
      (super.noSuchMethod(Invocation.method(#getPackageBuildNumber, []),
          returnValue: Future<String>.value('')) as _i8.Future<String>);
}

/// A class which mocks [OfflineEnqueueService].
///
/// See the documentation for Mockito's code generation for more information.
class MockOfflineEnqueueService extends _i1.Mock
    implements _i15.OfflineEnqueueService {
  MockOfflineEnqueueService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<void> startService() =>
      (super.noSuchMethod(Invocation.method(#startService, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<_i5.OfflineEnqueueItemModel?> getByUID(String? uid) =>
      (super.noSuchMethod(Invocation.method(#getByUID, [uid]),
              returnValue: Future<_i5.OfflineEnqueueItemModel?>.value())
          as _i8.Future<_i5.OfflineEnqueueItemModel?>);
  @override
  _i8.Future<_i5.OfflineEnqueueItemModel> enqueue(
          _i5.OfflineEnqueueItemModel? model) =>
      (super.noSuchMethod(Invocation.method(#enqueue, [model]),
              returnValue: Future<_i5.OfflineEnqueueItemModel>.value(
                  _FakeOfflineEnqueueItemModel_3()))
          as _i8.Future<_i5.OfflineEnqueueItemModel>);
  @override
  _i8.Future<void> update(_i5.OfflineEnqueueItemModel? model) =>
      (super.noSuchMethod(Invocation.method(#update, [model]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> delete(String? uid) =>
      (super.noSuchMethod(Invocation.method(#delete, [uid]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> retry(String? uid) =>
      (super.noSuchMethod(Invocation.method(#retry, [uid]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Stream<_i5.OfflineEnqueueItemModel?> streamByUID(String? uid) =>
      (super.noSuchMethod(Invocation.method(#streamByUID, [uid]),
              returnValue: Stream<_i5.OfflineEnqueueItemModel?>.empty())
          as _i8.Stream<_i5.OfflineEnqueueItemModel?>);
  @override
  _i8.Stream<List<_i5.OfflineEnqueueItemModel>> stream(
          {List<_i16.OfflineEnqueueItemType>? type = const [],
          List<_i17.OfflineEnqueueItemStatus>? status = const []}) =>
      (super.noSuchMethod(
              Invocation.method(#stream, [], {#type: type, #status: status}),
              returnValue: Stream<List<_i5.OfflineEnqueueItemModel>>.empty())
          as _i8.Stream<List<_i5.OfflineEnqueueItemModel>>);
  @override
  _i8.Future<List<_i5.OfflineEnqueueItemModel>> getAll(
          {List<_i16.OfflineEnqueueItemType>? type = const [],
          List<_i17.OfflineEnqueueItemStatus>? status = const []}) =>
      (super.noSuchMethod(
              Invocation.method(#getAll, [], {#type: type, #status: status}),
              returnValue: Future<List<_i5.OfflineEnqueueItemModel>>.value(
                  <_i5.OfflineEnqueueItemModel>[]))
          as _i8.Future<List<_i5.OfflineEnqueueItemModel>>);
}

/// A class which mocks [FirebaseAnalytics].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAnalytics extends _i1.Mock implements _i18.FirebaseAnalytics {
  MockFirebaseAnalytics() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.FirebaseApp get app => (super.noSuchMethod(Invocation.getter(#app),
      returnValue: _FakeFirebaseApp_4()) as _i6.FirebaseApp);
  @override
  set app(_i6.FirebaseApp? _app) =>
      super.noSuchMethod(Invocation.setter(#app, _app),
          returnValueForMissingStub: null);
  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(Invocation.getter(#pluginConstants),
          returnValue: <dynamic, dynamic>{}) as Map<dynamic, dynamic>);
  @override
  _i8.Future<void> logEvent(
          {String? name,
          Map<String, Object?>? parameters,
          _i19.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logEvent, [], {
            #name: name,
            #parameters: parameters,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> setConsent(
          {bool? adStorageConsentGranted,
          bool? analyticsStorageConsentGranted}) =>
      (super.noSuchMethod(
          Invocation.method(#setConsent, [], {
            #adStorageConsentGranted: adStorageConsentGranted,
            #analyticsStorageConsentGranted: analyticsStorageConsentGranted
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> setDefaultEventParameters(
          Map<String, Object>? defaultParameters) =>
      (super.noSuchMethod(
          Invocation.method(#setDefaultEventParameters, [defaultParameters]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> setAnalyticsCollectionEnabled(bool? enabled) =>
      (super.noSuchMethod(
          Invocation.method(#setAnalyticsCollectionEnabled, [enabled]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> setUserId(
          {String? id, _i19.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(
              #setUserId, [], {#id: id, #callOptions: callOptions}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> setCurrentScreen(
          {String? screenName,
          String? screenClassOverride = r'Flutter',
          _i19.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#setCurrentScreen, [], {
            #screenName: screenName,
            #screenClassOverride: screenClassOverride,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> setUserProperty(
          {String? name,
          String? value,
          _i19.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#setUserProperty, [],
              {#name: name, #value: value, #callOptions: callOptions}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> resetAnalyticsData() =>
      (super.noSuchMethod(Invocation.method(#resetAnalyticsData, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logAddPaymentInfo(
          {String? coupon,
          String? currency,
          String? paymentType,
          double? value,
          List<_i19.AnalyticsEventItem>? items,
          _i19.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logAddPaymentInfo, [], {
            #coupon: coupon,
            #currency: currency,
            #paymentType: paymentType,
            #value: value,
            #items: items,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logAddShippingInfo(
          {String? coupon,
          String? currency,
          double? value,
          String? shippingTier,
          List<_i19.AnalyticsEventItem>? items,
          _i19.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logAddShippingInfo, [], {
            #coupon: coupon,
            #currency: currency,
            #value: value,
            #shippingTier: shippingTier,
            #items: items,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logAddToCart(
          {List<_i19.AnalyticsEventItem>? items,
          double? value,
          String? currency,
          _i19.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logAddToCart, [], {
            #items: items,
            #value: value,
            #currency: currency,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logAddToWishlist(
          {List<_i19.AnalyticsEventItem>? items,
          double? value,
          String? currency,
          _i19.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logAddToWishlist, [], {
            #items: items,
            #value: value,
            #currency: currency,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logEcommercePurchase(
          {String? currency,
          double? value,
          String? transactionId,
          double? tax,
          double? shipping,
          String? coupon,
          String? location,
          int? numberOfNights,
          int? numberOfRooms,
          int? numberOfPassengers,
          String? origin,
          String? destination,
          String? startDate,
          String? endDate,
          String? travelClass}) =>
      (super.noSuchMethod(
          Invocation.method(#logEcommercePurchase, [], {
            #currency: currency,
            #value: value,
            #transactionId: transactionId,
            #tax: tax,
            #shipping: shipping,
            #coupon: coupon,
            #location: location,
            #numberOfNights: numberOfNights,
            #numberOfRooms: numberOfRooms,
            #numberOfPassengers: numberOfPassengers,
            #origin: origin,
            #destination: destination,
            #startDate: startDate,
            #endDate: endDate,
            #travelClass: travelClass
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logAdImpression(
          {String? adPlatform,
          String? adSource,
          String? adFormat,
          String? adUnitName,
          double? value,
          String? currency,
          _i19.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logAdImpression, [], {
            #adPlatform: adPlatform,
            #adSource: adSource,
            #adFormat: adFormat,
            #adUnitName: adUnitName,
            #value: value,
            #currency: currency,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logAppOpen({_i19.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logAppOpen, [], {#callOptions: callOptions}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logBeginCheckout(
          {double? value,
          String? currency,
          List<_i19.AnalyticsEventItem>? items,
          String? coupon,
          _i19.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logBeginCheckout, [], {
            #value: value,
            #currency: currency,
            #items: items,
            #coupon: coupon,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logCampaignDetails(
          {String? source,
          String? medium,
          String? campaign,
          String? term,
          String? content,
          String? aclid,
          String? cp1,
          _i19.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logCampaignDetails, [], {
            #source: source,
            #medium: medium,
            #campaign: campaign,
            #term: term,
            #content: content,
            #aclid: aclid,
            #cp1: cp1,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logEarnVirtualCurrency(
          {String? virtualCurrencyName,
          num? value,
          _i19.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logEarnVirtualCurrency, [], {
            #virtualCurrencyName: virtualCurrencyName,
            #value: value,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logPresentOffer(
          {String? itemId,
          String? itemName,
          String? itemCategory,
          int? quantity,
          double? price,
          double? value,
          String? currency,
          String? itemLocationId}) =>
      (super.noSuchMethod(
          Invocation.method(#logPresentOffer, [], {
            #itemId: itemId,
            #itemName: itemName,
            #itemCategory: itemCategory,
            #quantity: quantity,
            #price: price,
            #value: value,
            #currency: currency,
            #itemLocationId: itemLocationId
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logPurchaseRefund(
          {String? currency, double? value, String? transactionId}) =>
      (super.noSuchMethod(
          Invocation.method(#logPurchaseRefund, [], {
            #currency: currency,
            #value: value,
            #transactionId: transactionId
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logGenerateLead(
          {String? currency,
          double? value,
          _i19.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logGenerateLead, [],
              {#currency: currency, #value: value, #callOptions: callOptions}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logJoinGroup(
          {String? groupId, _i19.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logJoinGroup, [],
              {#groupId: groupId, #callOptions: callOptions}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logLevelUp(
          {int? level,
          String? character,
          _i19.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logLevelUp, [], {
            #level: level,
            #character: character,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logLevelStart(
          {String? levelName, _i19.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logLevelStart, [],
              {#levelName: levelName, #callOptions: callOptions}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logLevelEnd(
          {String? levelName,
          int? success,
          _i19.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logLevelEnd, [], {
            #levelName: levelName,
            #success: success,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logSetCheckoutOption(
          {int? checkoutStep, String? checkoutOption}) =>
      (super.noSuchMethod(
          Invocation.method(#logSetCheckoutOption, [],
              {#checkoutStep: checkoutStep, #checkoutOption: checkoutOption}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logLogin(
          {String? loginMethod, _i19.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logLogin, [],
              {#loginMethod: loginMethod, #callOptions: callOptions}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logPostScore(
          {int? score,
          int? level,
          String? character,
          _i19.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logPostScore, [], {
            #score: score,
            #level: level,
            #character: character,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logPurchase(
          {String? currency,
          String? coupon,
          double? value,
          List<_i19.AnalyticsEventItem>? items,
          double? tax,
          double? shipping,
          String? transactionId,
          String? affiliation,
          _i19.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logPurchase, [], {
            #currency: currency,
            #coupon: coupon,
            #value: value,
            #items: items,
            #tax: tax,
            #shipping: shipping,
            #transactionId: transactionId,
            #affiliation: affiliation,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logRemoveFromCart(
          {String? currency,
          double? value,
          List<_i19.AnalyticsEventItem>? items,
          _i19.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logRemoveFromCart, [], {
            #currency: currency,
            #value: value,
            #items: items,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logScreenView(
          {String? screenClass,
          String? screenName,
          _i19.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logScreenView, [], {
            #screenClass: screenClass,
            #screenName: screenName,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logSelectItem(
          {String? itemListId,
          String? itemListName,
          List<_i19.AnalyticsEventItem>? items,
          _i19.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logSelectItem, [], {
            #itemListId: itemListId,
            #itemListName: itemListName,
            #items: items,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logSelectPromotion(
          {String? creativeName,
          String? creativeSlot,
          List<_i19.AnalyticsEventItem>? items,
          String? locationId,
          String? promotionId,
          String? promotionName,
          _i19.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logSelectPromotion, [], {
            #creativeName: creativeName,
            #creativeSlot: creativeSlot,
            #items: items,
            #locationId: locationId,
            #promotionId: promotionId,
            #promotionName: promotionName,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logViewCart(
          {String? currency,
          double? value,
          List<_i19.AnalyticsEventItem>? items,
          _i19.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logViewCart, [], {
            #currency: currency,
            #value: value,
            #items: items,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logSearch(
          {String? searchTerm,
          int? numberOfNights,
          int? numberOfRooms,
          int? numberOfPassengers,
          String? origin,
          String? destination,
          String? startDate,
          String? endDate,
          String? travelClass,
          _i19.AnalyticsCallOptions? callOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#logSearch, [], {
            #searchTerm: searchTerm,
            #numberOfNights: numberOfNights,
            #numberOfRooms: numberOfRooms,
            #numberOfPassengers: numberOfPassengers,
            #origin: origin,
            #destination: destination,
            #startDate: startDate,
            #endDate: endDate,
            #travelClass: travelClass,
            #callOptions: callOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logSelectContent({String? contentType, String? itemId}) =>
      (super.noSuchMethod(
          Invocation.method(#logSelectContent, [],
              {#contentType: contentType, #itemId: itemId}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logShare(
          {String? contentType, String? itemId, String? method}) =>
      (super.noSuchMethod(
          Invocation.method(#logShare, [],
              {#contentType: contentType, #itemId: itemId, #method: method}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logSignUp({String? signUpMethod}) => (super.noSuchMethod(
      Invocation.method(#logSignUp, [], {#signUpMethod: signUpMethod}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logSpendVirtualCurrency(
          {String? itemName, String? virtualCurrencyName, num? value}) =>
      (super.noSuchMethod(
          Invocation.method(#logSpendVirtualCurrency, [], {
            #itemName: itemName,
            #virtualCurrencyName: virtualCurrencyName,
            #value: value
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logTutorialBegin() =>
      (super.noSuchMethod(Invocation.method(#logTutorialBegin, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logTutorialComplete() =>
      (super.noSuchMethod(Invocation.method(#logTutorialComplete, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logUnlockAchievement({String? id}) => (super.noSuchMethod(
      Invocation.method(#logUnlockAchievement, [], {#id: id}),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logViewItem(
          {String? currency,
          double? value,
          List<_i19.AnalyticsEventItem>? items}) =>
      (super.noSuchMethod(
          Invocation.method(#logViewItem, [],
              {#currency: currency, #value: value, #items: items}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logViewItemList(
          {List<_i19.AnalyticsEventItem>? items,
          String? itemListId,
          String? itemListName}) =>
      (super.noSuchMethod(
          Invocation.method(#logViewItemList, [], {
            #items: items,
            #itemListId: itemListId,
            #itemListName: itemListName
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logViewPromotion(
          {String? creativeName,
          String? creativeSlot,
          List<_i19.AnalyticsEventItem>? items,
          String? locationId,
          String? promotionId,
          String? promotionName}) =>
      (super.noSuchMethod(
          Invocation.method(#logViewPromotion, [], {
            #creativeName: creativeName,
            #creativeSlot: creativeSlot,
            #items: items,
            #locationId: locationId,
            #promotionId: promotionId,
            #promotionName: promotionName
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logViewSearchResults({String? searchTerm}) =>
      (super.noSuchMethod(
          Invocation.method(
              #logViewSearchResults, [], {#searchTerm: searchTerm}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> logRefund(
          {String? currency,
          String? coupon,
          double? value,
          double? tax,
          double? shipping,
          String? transactionId,
          String? affiliation,
          List<_i19.AnalyticsEventItem>? items}) =>
      (super.noSuchMethod(
          Invocation.method(#logRefund, [], {
            #currency: currency,
            #coupon: coupon,
            #value: value,
            #tax: tax,
            #shipping: shipping,
            #transactionId: transactionId,
            #affiliation: affiliation,
            #items: items
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> setSessionTimeoutDuration(Duration? timeout) => (super
      .noSuchMethod(Invocation.method(#setSessionTimeoutDuration, [timeout]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
}
