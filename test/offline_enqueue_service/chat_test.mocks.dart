// Mocks generated by Mockito 5.1.0 from annotations
// in truvideo_enterprise/test/offline_enqueue_service/chat_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:truvideo_enterprise/model/message.dart' as _i2;
import 'package:truvideo_enterprise/model/message_authentication_information.dart'
    as _i6;
import 'package:truvideo_enterprise/model/message_channel.dart' as _i8;
import 'package:truvideo_enterprise/model/message_member.dart' as _i7;
import 'package:truvideo_enterprise/service/local_db/_interface.dart' as _i3;
import 'package:truvideo_enterprise/service/messaging/_interface.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeMessageModel_0 extends _i1.Fake implements _i2.MessageModel {}

/// A class which mocks [LocalDatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDatabaseService extends _i1.Mock
    implements _i3.LocalDatabaseService {
  MockLocalDatabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> open(String? name) =>
      (super.noSuchMethod(Invocation.method(#open, [name]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> close(String? name) =>
      (super.noSuchMethod(Invocation.method(#close, [name]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> write(String? boxName, String? key, dynamic value) =>
      (super.noSuchMethod(Invocation.method(#write, [boxName, key, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<dynamic> read(String? boxName, String? key) =>
      (super.noSuchMethod(Invocation.method(#read, [boxName, key]),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  _i4.Future<List<dynamic>> getAll(String? boxName) =>
      (super.noSuchMethod(Invocation.method(#getAll, [boxName]),
              returnValue: Future<List<dynamic>>.value(<dynamic>[]))
          as _i4.Future<List<dynamic>>);
  @override
  _i4.Future<List<String>> getAllKeys(String? boxName) =>
      (super.noSuchMethod(Invocation.method(#getAllKeys, [boxName]),
              returnValue: Future<List<String>>.value(<String>[]))
          as _i4.Future<List<String>>);
  @override
  _i4.Stream<List<dynamic>> streamAll(String? boxName) => (super.noSuchMethod(
      Invocation.method(#streamAll, [boxName]),
      returnValue: Stream<List<dynamic>>.empty()) as _i4.Stream<List<dynamic>>);
  @override
  _i4.Stream<dynamic> streamByKey(String? boxName, String? key) =>
      (super.noSuchMethod(Invocation.method(#streamByKey, [boxName, key]),
          returnValue: Stream<dynamic>.empty()) as _i4.Stream<dynamic>);
  @override
  _i4.Future<void> delete(String? boxName, String? key) =>
      (super.noSuchMethod(Invocation.method(#delete, [boxName, key]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> deleteAll(String? boxName) =>
      (super.noSuchMethod(Invocation.method(#deleteAll, [boxName]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}

/// A class which mocks [MessagingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockMessagingService extends _i1.Mock implements _i5.MessagingService {
  MockMessagingService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i6.MessageAuthenticationInformationModel?>
      getCachedAuthenticationInformation() => (super.noSuchMethod(
              Invocation.method(#getCachedAuthenticationInformation, []),
              returnValue:
                  Future<_i6.MessageAuthenticationInformationModel?>.value())
          as _i4.Future<_i6.MessageAuthenticationInformationModel?>);
  @override
  _i4.Future<_i6.MessageAuthenticationInformationModel?> authenticate() =>
      (super.noSuchMethod(Invocation.method(#authenticate, []),
              returnValue:
                  Future<_i6.MessageAuthenticationInformationModel?>.value())
          as _i4.Future<_i6.MessageAuthenticationInformationModel?>);
  @override
  _i4.Future<List<_i7.MessageMemberModel>> getMembersPaginated(
          {String? accountUID,
          bool? onlyReplied = false,
          int? pageLength = 10,
          int? page = 0}) =>
      (super.noSuchMethod(
              Invocation.method(#getMembersPaginated, [], {
                #accountUID: accountUID,
                #onlyReplied: onlyReplied,
                #pageLength: pageLength,
                #page: page
              }),
              returnValue: Future<List<_i7.MessageMemberModel>>.value(
                  <_i7.MessageMemberModel>[]))
          as _i4.Future<List<_i7.MessageMemberModel>>);
  @override
  _i4.Future<List<_i7.MessageMemberModel>> getCachedMembers() =>
      (super.noSuchMethod(Invocation.method(#getCachedMembers, []),
              returnValue: Future<List<_i7.MessageMemberModel>>.value(
                  <_i7.MessageMemberModel>[]))
          as _i4.Future<List<_i7.MessageMemberModel>>);
  @override
  _i4.Future<_i8.MessageChannelModel?> getChannelByUid(String? uid) =>
      (super.noSuchMethod(Invocation.method(#getChannelByUid, [uid]),
              returnValue: Future<_i8.MessageChannelModel?>.value())
          as _i4.Future<_i8.MessageChannelModel?>);
  @override
  _i4.Stream<_i8.MessageChannelModel?> streamChannelByUid(String? uid) =>
      (super.noSuchMethod(Invocation.method(#streamChannelByUid, [uid]),
              returnValue: Stream<_i8.MessageChannelModel?>.empty())
          as _i4.Stream<_i8.MessageChannelModel?>);
  @override
  _i4.Future<List<_i2.MessageModel>> getCachedMessages({String? memberUID}) =>
      (super.noSuchMethod(
          Invocation.method(#getCachedMessages, [], {#memberUID: memberUID}),
          returnValue:
              Future<List<_i2.MessageModel>>.value(<_i2.MessageModel>[])) as _i4
          .Future<List<_i2.MessageModel>>);
  @override
  _i4.Future<List<_i2.MessageModel>> getMessages(
          {String? accountUID, String? memberUID}) =>
      (super.noSuchMethod(
              Invocation.method(#getMessages, [],
                  {#accountUID: accountUID, #memberUID: memberUID}),
              returnValue:
                  Future<List<_i2.MessageModel>>.value(<_i2.MessageModel>[]))
          as _i4.Future<List<_i2.MessageModel>>);
  @override
  _i4.Future<void> deleteChannels(List<String>? uuids) =>
      (super.noSuchMethod(Invocation.method(#deleteChannels, [uuids]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> markAsArchived(List<String>? uuids, bool? archived) =>
      (super.noSuchMethod(Invocation.method(#markAsArchived, [uuids, archived]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> markAsFavorite(List<String>? uuids, bool? favorite) =>
      (super.noSuchMethod(Invocation.method(#markAsFavorite, [uuids, favorite]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<_i2.MessageModel> createMessage(
          {String? channelUID,
          String? message,
          String? accountUID,
          String? auxUID = r''}) =>
      (super.noSuchMethod(
              Invocation.method(#createMessage, [], {
                #channelUID: channelUID,
                #message: message,
                #accountUID: accountUID,
                #auxUID: auxUID
              }),
              returnValue:
                  Future<_i2.MessageModel>.value(_FakeMessageModel_0()))
          as _i4.Future<_i2.MessageModel>);
  @override
  _i4.Future<void> deleteMessages(List<String>? uuids) =>
      (super.noSuchMethod(Invocation.method(#deleteMessages, [uuids]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}
