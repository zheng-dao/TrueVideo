// Mocks generated by Mockito 5.1.0 from annotations
// in truvideo_enterprise/test/offline_enqueue_service/log_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:truvideo_enterprise/model/offline_enqueue/offline_enqueue_item.dart'
    as _i2;
import 'package:truvideo_enterprise/model/offline_enqueue/offline_enqueue_item_status.dart'
    as _i10;
import 'package:truvideo_enterprise/model/offline_enqueue/offline_enqueue_item_type.dart'
    as _i9;
import 'package:truvideo_enterprise/service/local_db/_interface.dart' as _i7;
import 'package:truvideo_enterprise/service/log_event/_interface.dart' as _i3;
import 'package:truvideo_enterprise/service/log_event/model/level.dart' as _i6;
import 'package:truvideo_enterprise/service/log_event/model/module.dart' as _i5;
import 'package:truvideo_enterprise/service/offline_enqueue_service/_interface.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeOfflineEnqueueItemModel_0 extends _i1.Fake
    implements _i2.OfflineEnqueueItemModel {}

/// A class which mocks [LogEventService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogEventService extends _i1.Mock implements _i3.LogEventService {
  MockLogEventService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> logScreen(String? screenName) =>
      (super.noSuchMethod(Invocation.method(#logScreen, [screenName]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> logEvent(_i5.LogEventModule? module,
          {String? action = r'',
          _i6.LogEventLevel? level,
          String? message = r'',
          String? raw = r'',
          int? orderID}) =>
      (super.noSuchMethod(
          Invocation.method(#logEvent, [
            module
          ], {
            #action: action,
            #level: level,
            #message: message,
            #raw: raw,
            #orderID: orderID
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> processLog(_i5.LogEventModule? module,
          {String? action = r'',
          _i6.LogEventLevel? level,
          String? message = r'',
          String? raw = r'',
          int? orderID}) =>
      (super.noSuchMethod(
          Invocation.method(#processLog, [
            module
          ], {
            #action: action,
            #level: level,
            #message: message,
            #raw: raw,
            #orderID: orderID
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> logEventError(Exception? err, StackTrace? stackTrace) =>
      (super.noSuchMethod(Invocation.method(#logEventError, [err, stackTrace]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}

/// A class which mocks [LocalDatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDatabaseService extends _i1.Mock
    implements _i7.LocalDatabaseService {
  MockLocalDatabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> open(String? name) =>
      (super.noSuchMethod(Invocation.method(#open, [name]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> close(String? name) =>
      (super.noSuchMethod(Invocation.method(#close, [name]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> write(String? boxName, String? key, dynamic value) =>
      (super.noSuchMethod(Invocation.method(#write, [boxName, key, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<dynamic> read(String? boxName, String? key) =>
      (super.noSuchMethod(Invocation.method(#read, [boxName, key]),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
  @override
  _i4.Future<List<dynamic>> getAll(String? boxName) =>
      (super.noSuchMethod(Invocation.method(#getAll, [boxName]),
              returnValue: Future<List<dynamic>>.value(<dynamic>[]))
          as _i4.Future<List<dynamic>>);
  @override
  _i4.Future<List<String>> getAllKeys(String? boxName) =>
      (super.noSuchMethod(Invocation.method(#getAllKeys, [boxName]),
              returnValue: Future<List<String>>.value(<String>[]))
          as _i4.Future<List<String>>);
  @override
  _i4.Stream<List<dynamic>> streamAll(String? boxName) => (super.noSuchMethod(
      Invocation.method(#streamAll, [boxName]),
      returnValue: Stream<List<dynamic>>.empty()) as _i4.Stream<List<dynamic>>);
  @override
  _i4.Stream<dynamic> streamByKey(String? boxName, String? key) =>
      (super.noSuchMethod(Invocation.method(#streamByKey, [boxName, key]),
          returnValue: Stream<dynamic>.empty()) as _i4.Stream<dynamic>);
  @override
  _i4.Future<void> delete(String? boxName, String? key) =>
      (super.noSuchMethod(Invocation.method(#delete, [boxName, key]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> deleteAll(String? boxName) =>
      (super.noSuchMethod(Invocation.method(#deleteAll, [boxName]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}

/// A class which mocks [OfflineEnqueueService].
///
/// See the documentation for Mockito's code generation for more information.
class MockOfflineEnqueueService extends _i1.Mock
    implements _i8.OfflineEnqueueService {
  MockOfflineEnqueueService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> startService() =>
      (super.noSuchMethod(Invocation.method(#startService, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<_i2.OfflineEnqueueItemModel?> getByUID(String? uid) =>
      (super.noSuchMethod(Invocation.method(#getByUID, [uid]),
              returnValue: Future<_i2.OfflineEnqueueItemModel?>.value())
          as _i4.Future<_i2.OfflineEnqueueItemModel?>);
  @override
  _i4.Future<_i2.OfflineEnqueueItemModel> enqueue(
          _i2.OfflineEnqueueItemModel? model) =>
      (super.noSuchMethod(Invocation.method(#enqueue, [model]),
              returnValue: Future<_i2.OfflineEnqueueItemModel>.value(
                  _FakeOfflineEnqueueItemModel_0()))
          as _i4.Future<_i2.OfflineEnqueueItemModel>);
  @override
  _i4.Future<void> update(_i2.OfflineEnqueueItemModel? model) =>
      (super.noSuchMethod(Invocation.method(#update, [model]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> delete(String? uid) =>
      (super.noSuchMethod(Invocation.method(#delete, [uid]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> retry(String? uid) =>
      (super.noSuchMethod(Invocation.method(#retry, [uid]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Stream<_i2.OfflineEnqueueItemModel?> streamByUID(String? uid) =>
      (super.noSuchMethod(Invocation.method(#streamByUID, [uid]),
              returnValue: Stream<_i2.OfflineEnqueueItemModel?>.empty())
          as _i4.Stream<_i2.OfflineEnqueueItemModel?>);
  @override
  _i4.Stream<List<_i2.OfflineEnqueueItemModel>> stream(
          {List<_i9.OfflineEnqueueItemType>? type = const [],
          List<_i10.OfflineEnqueueItemStatus>? status = const []}) =>
      (super.noSuchMethod(
              Invocation.method(#stream, [], {#type: type, #status: status}),
              returnValue: Stream<List<_i2.OfflineEnqueueItemModel>>.empty())
          as _i4.Stream<List<_i2.OfflineEnqueueItemModel>>);
  @override
  _i4.Future<List<_i2.OfflineEnqueueItemModel>> getAll(
          {List<_i9.OfflineEnqueueItemType>? type = const [],
          List<_i10.OfflineEnqueueItemStatus>? status = const []}) =>
      (super.noSuchMethod(
              Invocation.method(#getAll, [], {#type: type, #status: status}),
              returnValue: Future<List<_i2.OfflineEnqueueItemModel>>.value(
                  <_i2.OfflineEnqueueItemModel>[]))
          as _i4.Future<List<_i2.OfflineEnqueueItemModel>>);
}
