// Mocks generated by Mockito 5.1.0 from annotations
// in truvideo_enterprise/test/offline_enqueue_service/ro_video_upload_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i9;

import 'package:mockito/mockito.dart' as _i1;
import 'package:truvideo_enterprise/model/camera/camera_picture_file.dart'
    as _i14;
import 'package:truvideo_enterprise/model/camera/camera_result.dart' as _i4;
import 'package:truvideo_enterprise/model/camera/camera_video_file.dart' as _i3;
import 'package:truvideo_enterprise/model/dealer_code_access_history.dart'
    as _i12;
import 'package:truvideo_enterprise/model/dealer_info.dart' as _i11;
import 'package:truvideo_enterprise/model/offline_enqueue/offline_enqueue_item.dart'
    as _i7;
import 'package:truvideo_enterprise/model/offline_enqueue/offline_enqueue_item_status.dart'
    as _i27;
import 'package:truvideo_enterprise/model/offline_enqueue/offline_enqueue_item_type.dart'
    as _i26;
import 'package:truvideo_enterprise/model/pagination.dart' as _i5;
import 'package:truvideo_enterprise/model/repair_order.dart' as _i16;
import 'package:truvideo_enterprise/model/repair_order_detail.dart' as _i17;
import 'package:truvideo_enterprise/model/ro/upload_video_request.dart' as _i6;
import 'package:truvideo_enterprise/model/tce_user.dart' as _i19;
import 'package:truvideo_enterprise/model/user.dart' as _i10;
import 'package:truvideo_enterprise/model/user_login.dart' as _i2;
import 'package:truvideo_enterprise/model/user_settings.dart' as _i13;
import 'package:truvideo_enterprise/service/auth/_interface.dart' as _i8;
import 'package:truvideo_enterprise/service/event_bus/_interface.dart' as _i24;
import 'package:truvideo_enterprise/service/file_bucket/_interface.dart'
    as _i20;
import 'package:truvideo_enterprise/service/local_db/_interface.dart' as _i28;
import 'package:truvideo_enterprise/service/log_event/_interface.dart' as _i21;
import 'package:truvideo_enterprise/service/log_event/model/level.dart' as _i23;
import 'package:truvideo_enterprise/service/log_event/model/module.dart'
    as _i22;
import 'package:truvideo_enterprise/service/offline_enqueue_service/_interface.dart'
    as _i25;
import 'package:truvideo_enterprise/service/repair_order/_interface.dart'
    as _i15;
import 'package:truvideo_enterprise/service/repair_order/dto/video_upload.dart'
    as _i18;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeUserLoginModel_0 extends _i1.Fake implements _i2.UserLoginModel {}

class _FakeCameraVideoFileModel_1 extends _i1.Fake
    implements _i3.CameraVideoFileModel {}

class _Fake$CameraResultModelCopyWith_2<$Res> extends _i1.Fake
    implements _i4.$CameraResultModelCopyWith<$Res> {}

class _FakePaginationModel_3<T> extends _i1.Fake
    implements _i5.PaginationModel<T> {}

class _FakeRepairOrderUploadVideoRequestModel_4 extends _i1.Fake
    implements _i6.RepairOrderUploadVideoRequestModel {}

class _FakeOfflineEnqueueItemModel_5 extends _i1.Fake
    implements _i7.OfflineEnqueueItemModel {}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i8.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i10.UserModel?> getCachedLoggedUser() =>
      (super.noSuchMethod(Invocation.method(#getCachedLoggedUser, []),
              returnValue: Future<_i10.UserModel?>.value())
          as _i9.Future<_i10.UserModel?>);
  @override
  _i9.Future<_i10.UserModel?> isLogin() =>
      (super.noSuchMethod(Invocation.method(#isLogin, []),
              returnValue: Future<_i10.UserModel?>.value())
          as _i9.Future<_i10.UserModel?>);
  @override
  _i9.Future<_i8.LoginResult> login(
          {String? dealerCode,
          String? userUuid,
          String? pin,
          bool? validateOnly = false}) =>
      (super.noSuchMethod(
              Invocation.method(#login, [], {
                #dealerCode: dealerCode,
                #userUuid: userUuid,
                #pin: pin,
                #validateOnly: validateOnly
              }),
              returnValue:
                  Future<_i8.LoginResult>.value(_i8.LoginResult.success))
          as _i9.Future<_i8.LoginResult>);
  @override
  _i9.Future<void> logout() =>
      (super.noSuchMethod(Invocation.method(#logout, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<_i11.DealerInfoModel?> getDealerInfo(String? dealerCode) =>
      (super.noSuchMethod(Invocation.method(#getDealerInfo, [dealerCode]),
              returnValue: Future<_i11.DealerInfoModel?>.value())
          as _i9.Future<_i11.DealerInfoModel?>);
  @override
  _i9.Future<List<_i2.UserLoginModel>> getUsersForDealerCode(
          String? dealerCode) =>
      (super.noSuchMethod(
          Invocation.method(#getUsersForDealerCode, [dealerCode]),
          returnValue: Future<List<_i2.UserLoginModel>>.value(
              <_i2.UserLoginModel>[])) as _i9.Future<List<_i2.UserLoginModel>>);
  @override
  String getStoredDealerCode() =>
      (super.noSuchMethod(Invocation.method(#getStoredDealerCode, []),
          returnValue: '') as String);
  @override
  _i9.Future<void> storeDealerCode(String? dealerCode) =>
      (super.noSuchMethod(Invocation.method(#storeDealerCode, [dealerCode]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> clearDealerCode() =>
      (super.noSuchMethod(Invocation.method(#clearDealerCode, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> deleteLastAccessDate(String? userUid) =>
      (super.noSuchMethod(Invocation.method(#deleteLastAccessDate, [userUid]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  DateTime? getLastAccessDate(String? userUid) =>
      (super.noSuchMethod(Invocation.method(#getLastAccessDate, [userUid]))
          as DateTime?);
  @override
  _i9.Future<_i2.UserLoginModel> create(
          {String? dealerCode,
          String? firstName,
          String? lastName,
          String? pin,
          String? title,
          String? publicDealerUuid,
          String? email,
          String? username,
          String? password,
          String? mobileNumber,
          String? integrationId}) =>
      (super.noSuchMethod(
              Invocation.method(#create, [], {
                #dealerCode: dealerCode,
                #firstName: firstName,
                #lastName: lastName,
                #pin: pin,
                #title: title,
                #publicDealerUuid: publicDealerUuid,
                #email: email,
                #username: username,
                #password: password,
                #mobileNumber: mobileNumber,
                #integrationId: integrationId
              }),
              returnValue:
                  Future<_i2.UserLoginModel>.value(_FakeUserLoginModel_0()))
          as _i9.Future<_i2.UserLoginModel>);
  @override
  _i9.Stream<List<_i12.DealerCodeAccessHistoryModel>>
      streamDealerCodesHistory() =>
          (super.noSuchMethod(Invocation.method(#streamDealerCodesHistory, []),
                  returnValue:
                      Stream<List<_i12.DealerCodeAccessHistoryModel>>.empty())
              as _i9.Stream<List<_i12.DealerCodeAccessHistoryModel>>);
  @override
  _i9.Future<List<_i12.DealerCodeAccessHistoryModel>> getDealerCodesHistory() =>
      (super.noSuchMethod(Invocation.method(#getDealerCodesHistory, []),
          returnValue: Future<List<_i12.DealerCodeAccessHistoryModel>>.value(
              <_i12.DealerCodeAccessHistoryModel>[])) as _i9
          .Future<List<_i12.DealerCodeAccessHistoryModel>>);
  @override
  _i9.Future<void> validateUsernameEmail({String? email, String? username}) =>
      (super.noSuchMethod(
          Invocation.method(
              #validateUsernameEmail, [], {#email: email, #username: username}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<_i10.UserModel?> getMyProfile() =>
      (super.noSuchMethod(Invocation.method(#getMyProfile, []),
              returnValue: Future<_i10.UserModel?>.value())
          as _i9.Future<_i10.UserModel?>);
  @override
  _i9.Future<List<_i13.UserSettingsModel>> getUserSettings() =>
      (super.noSuchMethod(Invocation.method(#getUserSettings, []),
              returnValue: Future<List<_i13.UserSettingsModel>>.value(
                  <_i13.UserSettingsModel>[]))
          as _i9.Future<List<_i13.UserSettingsModel>>);
  @override
  _i9.Future<List<_i13.UserSettingsModel>?> getCachedUserSettings() =>
      (super.noSuchMethod(Invocation.method(#getCachedUserSettings, []),
              returnValue: Future<List<_i13.UserSettingsModel>?>.value())
          as _i9.Future<List<_i13.UserSettingsModel>?>);
}

/// A class which mocks [CameraResultModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockCameraResultModel extends _i1.Mock implements _i4.CameraResultModel {
  MockCameraResultModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.CameraVideoFileModel get video => (super.noSuchMethod(
      Invocation.getter(#video),
      returnValue: _FakeCameraVideoFileModel_1()) as _i3.CameraVideoFileModel);
  @override
  List<_i14.CameraPictureFileModel> get pictures =>
      (super.noSuchMethod(Invocation.getter(#pictures),
              returnValue: <_i14.CameraPictureFileModel>[])
          as List<_i14.CameraPictureFileModel>);
  @override
  _i4.$CameraResultModelCopyWith<_i4.CameraResultModel> get copyWith =>
      (super.noSuchMethod(Invocation.getter(#copyWith),
              returnValue:
                  _Fake$CameraResultModelCopyWith_2<_i4.CameraResultModel>())
          as _i4.$CameraResultModelCopyWith<_i4.CameraResultModel>);
  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(Invocation.method(#toJson, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
}

/// A class which mocks [RepairOrderService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRepairOrderService extends _i1.Mock
    implements _i15.RepairOrderService {
  MockRepairOrderService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i5.PaginationModel<_i16.RepairOrderModel>> getList(
          {int? page = 0,
          int? pageSize = 20,
          int? id,
          _i15.RepairOrderTypeFilter? type = _i15.RepairOrderTypeFilter.all,
          String? filterBy = r'',
          String? query = r''}) =>
      (super.noSuchMethod(
          Invocation.method(#getList, [], {
            #page: page,
            #pageSize: pageSize,
            #id: id,
            #type: type,
            #filterBy: filterBy,
            #query: query
          }),
          returnValue: Future<_i5.PaginationModel<_i16.RepairOrderModel>>.value(
              _FakePaginationModel_3<_i16.RepairOrderModel>())) as _i9
          .Future<_i5.PaginationModel<_i16.RepairOrderModel>>);
  @override
  _i9.Future<List<_i16.RepairOrderModel>> getCachedList(
          {String? status = r''}) =>
      (super.noSuchMethod(
              Invocation.method(#getCachedList, [], {#status: status}),
              returnValue: Future<List<_i16.RepairOrderModel>>.value(
                  <_i16.RepairOrderModel>[]))
          as _i9.Future<List<_i16.RepairOrderModel>>);
  @override
  _i9.Future<void> setCacheList(
          {String? status = r'', List<_i16.RepairOrderModel>? items}) =>
      (super.noSuchMethod(
          Invocation.method(
              #setCacheList, [], {#status: status, #items: items}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> updateCacheList(_i16.RepairOrderModel? item) =>
      (super.noSuchMethod(Invocation.method(#updateCacheList, [item]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<_i17.RepairOrderDetailModel?> getCachedDetail(int? id) =>
      (super.noSuchMethod(Invocation.method(#getCachedDetail, [id]),
              returnValue: Future<_i17.RepairOrderDetailModel?>.value())
          as _i9.Future<_i17.RepairOrderDetailModel?>);
  @override
  _i9.Future<_i17.RepairOrderDetailModel?> getDetail(int? id) =>
      (super.noSuchMethod(Invocation.method(#getDetail, [id]),
              returnValue: Future<_i17.RepairOrderDetailModel?>.value())
          as _i9.Future<_i17.RepairOrderDetailModel?>);
  @override
  _i9.Future<_i6.RepairOrderUploadVideoRequestModel> addVideoUploadRequest(
          {int? orderID,
          String? orderType,
          _i4.CameraResultModel? cameraResult,
          String? tagId = r'',
          String? typeId = r'',
          String? description = r''}) =>
      (super.noSuchMethod(
              Invocation.method(#addVideoUploadRequest, [], {
                #orderID: orderID,
                #orderType: orderType,
                #cameraResult: cameraResult,
                #tagId: tagId,
                #typeId: typeId,
                #description: description
              }),
              returnValue: Future<_i6.RepairOrderUploadVideoRequestModel>.value(
                  _FakeRepairOrderUploadVideoRequestModel_4()))
          as _i9.Future<_i6.RepairOrderUploadVideoRequestModel>);
  @override
  _i9.Future<_i6.RepairOrderUploadVideoRequestModel?>
      getVideoUploadRequestByUID(String? uid) => (super.noSuchMethod(
              Invocation.method(#getVideoUploadRequestByUID, [uid]),
              returnValue:
                  Future<_i6.RepairOrderUploadVideoRequestModel?>.value())
          as _i9.Future<_i6.RepairOrderUploadVideoRequestModel?>);
  @override
  _i9.Future<_i6.RepairOrderUploadVideoRequestModel?> updateVideoUploadRequest(
          _i6.RepairOrderUploadVideoRequestModel? model) =>
      (super.noSuchMethod(Invocation.method(#updateVideoUploadRequest, [model]),
              returnValue:
                  Future<_i6.RepairOrderUploadVideoRequestModel?>.value())
          as _i9.Future<_i6.RepairOrderUploadVideoRequestModel?>);
  @override
  _i9.Future<List<_i6.RepairOrderUploadVideoRequestModel>>
      getVideoUploadRequests({int? orderID}) => (super.noSuchMethod(
          Invocation.method(#getVideoUploadRequests, [], {#orderID: orderID}),
          returnValue:
              Future<List<_i6.RepairOrderUploadVideoRequestModel>>.value(
                  <_i6.RepairOrderUploadVideoRequestModel>[])) as _i9
          .Future<List<_i6.RepairOrderUploadVideoRequestModel>>);
  @override
  _i9.Stream<List<_i6.RepairOrderUploadVideoRequestModel>>
      streamVideoUploadRequests({int? orderID}) => (super.noSuchMethod(
              Invocation.method(
                  #streamVideoUploadRequests, [], {#orderID: orderID}),
              returnValue:
                  Stream<List<_i6.RepairOrderUploadVideoRequestModel>>.empty())
          as _i9.Stream<List<_i6.RepairOrderUploadVideoRequestModel>>);
  @override
  _i9.Stream<_i6.RepairOrderUploadVideoRequestModel?>
      streamVideoUploadRequestByUID(String? uid) => (super.noSuchMethod(
              Invocation.method(#streamVideoUploadRequestByUID, [uid]),
              returnValue:
                  Stream<_i6.RepairOrderUploadVideoRequestModel?>.empty())
          as _i9.Stream<_i6.RepairOrderUploadVideoRequestModel?>);
  @override
  _i9.Future<void> deleteVideoUploadRequest(String? uid) =>
      (super.noSuchMethod(Invocation.method(#deleteVideoUploadRequest, [uid]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> startVideoUploadRequest(String? uid) =>
      (super.noSuchMethod(Invocation.method(#startVideoUploadRequest, [uid]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> retryVideoUploadRequest(String? uid) =>
      (super.noSuchMethod(Invocation.method(#retryVideoUploadRequest, [uid]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> uploadVideo(
          {int? orderID, _i18.VideoUploadDTO? videoUpload}) =>
      (super.noSuchMethod(
          Invocation.method(
              #uploadVideo, [], {#orderID: orderID, #videoUpload: videoUpload}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<List<_i19.TCEUserModel>> getAdvisors() =>
      (super.noSuchMethod(Invocation.method(#getAdvisors, []),
              returnValue:
                  Future<List<_i19.TCEUserModel>>.value(<_i19.TCEUserModel>[]))
          as _i9.Future<List<_i19.TCEUserModel>>);
  @override
  _i9.Future<int> create(
          {String? jobServiceNumber = r'',
          String? orderType = r'',
          int? advisorId,
          String? firstName = r'',
          String? lastName = r'',
          String? mobileNumber = r'',
          String? email = r'',
          String? stockNo = r'',
          String? make = r'',
          String? model = r'',
          String? year = r'',
          String? color = r'',
          bool? isForReview = false}) =>
      (super.noSuchMethod(
          Invocation.method(#create, [], {
            #jobServiceNumber: jobServiceNumber,
            #orderType: orderType,
            #advisorId: advisorId,
            #firstName: firstName,
            #lastName: lastName,
            #mobileNumber: mobileNumber,
            #email: email,
            #stockNo: stockNo,
            #make: make,
            #model: model,
            #year: year,
            #color: color,
            #isForReview: isForReview
          }),
          returnValue: Future<int>.value(0)) as _i9.Future<int>);
  @override
  _i9.Future<void> update(
          {int? id,
          String? orderType = r'',
          String? jobServiceNumber = r'',
          int? advisorId,
          String? firstName = r'',
          String? lastName = r'',
          String? mobileNumber = r'',
          String? email = r'',
          String? stockNo = r'',
          String? make = r'',
          String? model = r'',
          String? year = r'',
          String? color = r'',
          bool? isForReview = false}) =>
      (super.noSuchMethod(
          Invocation.method(#update, [], {
            #id: id,
            #orderType: orderType,
            #jobServiceNumber: jobServiceNumber,
            #advisorId: advisorId,
            #firstName: firstName,
            #lastName: lastName,
            #mobileNumber: mobileNumber,
            #email: email,
            #stockNo: stockNo,
            #make: make,
            #model: model,
            #year: year,
            #color: color,
            #isForReview: isForReview
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<bool> validateJobServiceNumber(String? jobServiceNumber) =>
      (super.noSuchMethod(
          Invocation.method(#validateJobServiceNumber, [jobServiceNumber]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
}

/// A class which mocks [FileBucketService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileBucketService extends _i1.Mock implements _i20.FileBucketService {
  MockFileBucketService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<String> upload(String? filePath,
          {String? fileName = r'',
          String? folder = r'',
          String? bucketName,
          String? region,
          String? poolID,
          dynamic Function(double)? onProgressChange}) =>
      (super.noSuchMethod(
          Invocation.method(#upload, [
            filePath
          ], {
            #fileName: fileName,
            #folder: folder,
            #bucketName: bucketName,
            #region: region,
            #poolID: poolID,
            #onProgressChange: onProgressChange
          }),
          returnValue: Future<String>.value('')) as _i9.Future<String>);
}

/// A class which mocks [LogEventService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogEventService extends _i1.Mock implements _i21.LogEventService {
  MockLogEventService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<void> logScreen(String? screenName) =>
      (super.noSuchMethod(Invocation.method(#logScreen, [screenName]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> logEvent(_i22.LogEventModule? module,
          {String? action = r'',
          _i23.LogEventLevel? level,
          String? message = r'',
          String? raw = r'',
          int? orderID}) =>
      (super.noSuchMethod(
          Invocation.method(#logEvent, [
            module
          ], {
            #action: action,
            #level: level,
            #message: message,
            #raw: raw,
            #orderID: orderID
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> processLog(_i22.LogEventModule? module,
          {String? action = r'',
          _i23.LogEventLevel? level,
          String? message = r'',
          String? raw = r'',
          int? orderID}) =>
      (super.noSuchMethod(
          Invocation.method(#processLog, [
            module
          ], {
            #action: action,
            #level: level,
            #message: message,
            #raw: raw,
            #orderID: orderID
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> logEventError(Exception? err, StackTrace? stackTrace) =>
      (super.noSuchMethod(Invocation.method(#logEventError, [err, stackTrace]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
}

/// A class which mocks [EventBusService].
///
/// See the documentation for Mockito's code generation for more information.
class MockEventBusService extends _i1.Mock implements _i24.EventBusService {
  MockEventBusService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void emit(dynamic data) =>
      super.noSuchMethod(Invocation.method(#emit, [data]),
          returnValueForMissingStub: null);
  @override
  _i9.Stream<T> streamEvents<T>() =>
      (super.noSuchMethod(Invocation.method(#streamEvents, []),
          returnValue: Stream<T>.empty()) as _i9.Stream<T>);
}

/// A class which mocks [OfflineEnqueueService].
///
/// See the documentation for Mockito's code generation for more information.
class MockOfflineEnqueueService extends _i1.Mock
    implements _i25.OfflineEnqueueService {
  MockOfflineEnqueueService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<void> startService() =>
      (super.noSuchMethod(Invocation.method(#startService, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<_i7.OfflineEnqueueItemModel?> getByUID(String? uid) =>
      (super.noSuchMethod(Invocation.method(#getByUID, [uid]),
              returnValue: Future<_i7.OfflineEnqueueItemModel?>.value())
          as _i9.Future<_i7.OfflineEnqueueItemModel?>);
  @override
  _i9.Future<_i7.OfflineEnqueueItemModel> enqueue(
          _i7.OfflineEnqueueItemModel? model) =>
      (super.noSuchMethod(Invocation.method(#enqueue, [model]),
              returnValue: Future<_i7.OfflineEnqueueItemModel>.value(
                  _FakeOfflineEnqueueItemModel_5()))
          as _i9.Future<_i7.OfflineEnqueueItemModel>);
  @override
  _i9.Future<void> update(_i7.OfflineEnqueueItemModel? model) =>
      (super.noSuchMethod(Invocation.method(#update, [model]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> delete(String? uid) =>
      (super.noSuchMethod(Invocation.method(#delete, [uid]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> retry(String? uid) =>
      (super.noSuchMethod(Invocation.method(#retry, [uid]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Stream<_i7.OfflineEnqueueItemModel?> streamByUID(String? uid) =>
      (super.noSuchMethod(Invocation.method(#streamByUID, [uid]),
              returnValue: Stream<_i7.OfflineEnqueueItemModel?>.empty())
          as _i9.Stream<_i7.OfflineEnqueueItemModel?>);
  @override
  _i9.Stream<List<_i7.OfflineEnqueueItemModel>> stream(
          {List<_i26.OfflineEnqueueItemType>? type = const [],
          List<_i27.OfflineEnqueueItemStatus>? status = const []}) =>
      (super.noSuchMethod(
              Invocation.method(#stream, [], {#type: type, #status: status}),
              returnValue: Stream<List<_i7.OfflineEnqueueItemModel>>.empty())
          as _i9.Stream<List<_i7.OfflineEnqueueItemModel>>);
  @override
  _i9.Future<List<_i7.OfflineEnqueueItemModel>> getAll(
          {List<_i26.OfflineEnqueueItemType>? type = const [],
          List<_i27.OfflineEnqueueItemStatus>? status = const []}) =>
      (super.noSuchMethod(
              Invocation.method(#getAll, [], {#type: type, #status: status}),
              returnValue: Future<List<_i7.OfflineEnqueueItemModel>>.value(
                  <_i7.OfflineEnqueueItemModel>[]))
          as _i9.Future<List<_i7.OfflineEnqueueItemModel>>);
}

/// A class which mocks [LocalDatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDatabaseService extends _i1.Mock
    implements _i28.LocalDatabaseService {
  MockLocalDatabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<void> open(String? name) =>
      (super.noSuchMethod(Invocation.method(#open, [name]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> close(String? name) =>
      (super.noSuchMethod(Invocation.method(#close, [name]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> write(String? boxName, String? key, dynamic value) =>
      (super.noSuchMethod(Invocation.method(#write, [boxName, key, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<dynamic> read(String? boxName, String? key) =>
      (super.noSuchMethod(Invocation.method(#read, [boxName, key]),
          returnValue: Future<dynamic>.value()) as _i9.Future<dynamic>);
  @override
  _i9.Future<List<dynamic>> getAll(String? boxName) =>
      (super.noSuchMethod(Invocation.method(#getAll, [boxName]),
              returnValue: Future<List<dynamic>>.value(<dynamic>[]))
          as _i9.Future<List<dynamic>>);
  @override
  _i9.Future<List<String>> getAllKeys(String? boxName) =>
      (super.noSuchMethod(Invocation.method(#getAllKeys, [boxName]),
              returnValue: Future<List<String>>.value(<String>[]))
          as _i9.Future<List<String>>);
  @override
  _i9.Stream<List<dynamic>> streamAll(String? boxName) => (super.noSuchMethod(
      Invocation.method(#streamAll, [boxName]),
      returnValue: Stream<List<dynamic>>.empty()) as _i9.Stream<List<dynamic>>);
  @override
  _i9.Stream<dynamic> streamByKey(String? boxName, String? key) =>
      (super.noSuchMethod(Invocation.method(#streamByKey, [boxName, key]),
          returnValue: Stream<dynamic>.empty()) as _i9.Stream<dynamic>);
  @override
  _i9.Future<void> delete(String? boxName, String? key) =>
      (super.noSuchMethod(Invocation.method(#delete, [boxName, key]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> deleteAll(String? boxName) =>
      (super.noSuchMethod(Invocation.method(#deleteAll, [boxName]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
}
