// Mocks generated by Mockito 5.1.0 from annotations
// in truvideo_enterprise/test/device/device_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:device_info_plus/device_info_plus.dart' as _i4;
import 'package:device_info_plus_platform_interface/device_info_plus_platform_interface.dart'
    as _i2;
import 'package:device_info_plus_platform_interface/model/base_device_info.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeAndroidBuildVersion_0 extends _i1.Fake
    implements _i2.AndroidBuildVersion {}

class _FakeAndroidDeviceInfo_1 extends _i1.Fake
    implements _i2.AndroidDeviceInfo {}

class _FakeIosDeviceInfo_2 extends _i1.Fake implements _i2.IosDeviceInfo {}

class _FakeLinuxDeviceInfo_3 extends _i1.Fake implements _i2.LinuxDeviceInfo {}

class _FakeWebBrowserInfo_4 extends _i1.Fake implements _i2.WebBrowserInfo {}

class _FakeMacOsDeviceInfo_5 extends _i1.Fake implements _i2.MacOsDeviceInfo {}

class _FakeWindowsDeviceInfo_6 extends _i1.Fake
    implements _i2.WindowsDeviceInfo {}

class _FakeBaseDeviceInfo_7 extends _i1.Fake implements _i3.BaseDeviceInfo {}

class _FakeIosUtsname_8 extends _i1.Fake implements _i2.IosUtsname {}

/// A class which mocks [AndroidDeviceInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockAndroidDeviceInfo extends _i1.Mock implements _i2.AndroidDeviceInfo {
  MockAndroidDeviceInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AndroidBuildVersion get version => (super.noSuchMethod(
      Invocation.getter(#version),
      returnValue: _FakeAndroidBuildVersion_0()) as _i2.AndroidBuildVersion);
  @override
  List<String?> get supported32BitAbis =>
      (super.noSuchMethod(Invocation.getter(#supported32BitAbis),
          returnValue: <String?>[]) as List<String?>);
  @override
  List<String?> get supported64BitAbis =>
      (super.noSuchMethod(Invocation.getter(#supported64BitAbis),
          returnValue: <String?>[]) as List<String?>);
  @override
  List<String?> get supportedAbis =>
      (super.noSuchMethod(Invocation.getter(#supportedAbis),
          returnValue: <String?>[]) as List<String?>);
  @override
  List<String?> get systemFeatures =>
      (super.noSuchMethod(Invocation.getter(#systemFeatures),
          returnValue: <String?>[]) as List<String?>);
  @override
  Map<String, dynamic> toMap() =>
      (super.noSuchMethod(Invocation.method(#toMap, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
}

/// A class which mocks [DeviceInfoPlugin].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceInfoPlugin extends _i1.Mock implements _i4.DeviceInfoPlugin {
  MockDeviceInfoPlugin() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.AndroidDeviceInfo> get androidInfo => (super.noSuchMethod(
          Invocation.getter(#androidInfo),
          returnValue:
              Future<_i2.AndroidDeviceInfo>.value(_FakeAndroidDeviceInfo_1()))
      as _i5.Future<_i2.AndroidDeviceInfo>);
  @override
  _i5.Future<_i2.IosDeviceInfo> get iosInfo => (super.noSuchMethod(
          Invocation.getter(#iosInfo),
          returnValue: Future<_i2.IosDeviceInfo>.value(_FakeIosDeviceInfo_2()))
      as _i5.Future<_i2.IosDeviceInfo>);
  @override
  _i5.Future<_i2.LinuxDeviceInfo> get linuxInfo =>
      (super.noSuchMethod(Invocation.getter(#linuxInfo),
              returnValue:
                  Future<_i2.LinuxDeviceInfo>.value(_FakeLinuxDeviceInfo_3()))
          as _i5.Future<_i2.LinuxDeviceInfo>);
  @override
  _i5.Future<_i2.WebBrowserInfo> get webBrowserInfo =>
      (super.noSuchMethod(Invocation.getter(#webBrowserInfo),
              returnValue:
                  Future<_i2.WebBrowserInfo>.value(_FakeWebBrowserInfo_4()))
          as _i5.Future<_i2.WebBrowserInfo>);
  @override
  _i5.Future<_i2.MacOsDeviceInfo> get macOsInfo =>
      (super.noSuchMethod(Invocation.getter(#macOsInfo),
              returnValue:
                  Future<_i2.MacOsDeviceInfo>.value(_FakeMacOsDeviceInfo_5()))
          as _i5.Future<_i2.MacOsDeviceInfo>);
  @override
  _i5.Future<_i2.WindowsDeviceInfo> get windowsInfo => (super.noSuchMethod(
          Invocation.getter(#windowsInfo),
          returnValue:
              Future<_i2.WindowsDeviceInfo>.value(_FakeWindowsDeviceInfo_6()))
      as _i5.Future<_i2.WindowsDeviceInfo>);
  @override
  _i5.Future<_i3.BaseDeviceInfo> get deviceInfo =>
      (super.noSuchMethod(Invocation.getter(#deviceInfo),
              returnValue:
                  Future<_i3.BaseDeviceInfo>.value(_FakeBaseDeviceInfo_7()))
          as _i5.Future<_i3.BaseDeviceInfo>);
}

/// A class which mocks [WebBrowserInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebBrowserInfo extends _i1.Mock implements _i2.WebBrowserInfo {
  MockWebBrowserInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BrowserName get browserName =>
      (super.noSuchMethod(Invocation.getter(#browserName),
          returnValue: _i2.BrowserName.firefox) as _i2.BrowserName);
  @override
  Map<String, dynamic> toMap() =>
      (super.noSuchMethod(Invocation.method(#toMap, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
}

/// A class which mocks [IosDeviceInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockIosDeviceInfo extends _i1.Mock implements _i2.IosDeviceInfo {
  MockIosDeviceInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isPhysicalDevice =>
      (super.noSuchMethod(Invocation.getter(#isPhysicalDevice),
          returnValue: false) as bool);
  @override
  _i2.IosUtsname get utsname => (super.noSuchMethod(Invocation.getter(#utsname),
      returnValue: _FakeIosUtsname_8()) as _i2.IosUtsname);
  @override
  Map<String, dynamic> toMap() =>
      (super.noSuchMethod(Invocation.method(#toMap, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
}
