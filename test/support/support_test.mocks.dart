// Mocks generated by Mockito 5.1.0 from annotations
// in truvideo_enterprise/test/support/support_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;

import 'package:disk_space/disk_space.dart' as _i17;
import 'package:mockito/mockito.dart' as _i1;
import 'package:package_info_plus/package_info_plus.dart' as _i2;
import 'package:truvideo_enterprise/model/dealer_code_access_history.dart'
    as _i11;
import 'package:truvideo_enterprise/model/dealer_info.dart' as _i10;
import 'package:truvideo_enterprise/model/device_info.dart' as _i4;
import 'package:truvideo_enterprise/model/user.dart' as _i9;
import 'package:truvideo_enterprise/model/user_login.dart' as _i3;
import 'package:truvideo_enterprise/model/user_settings.dart' as _i12;
import 'package:truvideo_enterprise/service/auth/_interface.dart' as _i8;
import 'package:truvideo_enterprise/service/connectivity/_interface.dart'
    as _i13;
import 'package:truvideo_enterprise/service/date/_interface.dart' as _i14;
import 'package:truvideo_enterprise/service/device/_interface.dart' as _i15;
import 'package:truvideo_enterprise/service/http/_interface.dart' as _i16;
import 'package:truvideo_enterprise/service/http/model/response.dart' as _i5;
import 'package:truvideo_enterprise/service/support/index.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakePackageInfo_0 extends _i1.Fake implements _i2.PackageInfo {}

class _FakeUserLoginModel_1 extends _i1.Fake implements _i3.UserLoginModel {}

class _FakeDateTime_2 extends _i1.Fake implements DateTime {}

class _FakeDeviceInfoModel_3 extends _i1.Fake implements _i4.DeviceInfoModel {}

class _FakeHttpResponseModel_4 extends _i1.Fake
    implements _i5.HttpResponseModel {}

/// A class which mocks [AppPackageInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppPackageInfo extends _i1.Mock implements _i6.AppPackageInfo {
  MockAppPackageInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.PackageInfo> fromPlatform() =>
      (super.noSuchMethod(Invocation.method(#fromPlatform, []),
              returnValue: Future<_i2.PackageInfo>.value(_FakePackageInfo_0()))
          as _i7.Future<_i2.PackageInfo>);
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i8.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i9.UserModel?> getCachedLoggedUser() =>
      (super.noSuchMethod(Invocation.method(#getCachedLoggedUser, []),
              returnValue: Future<_i9.UserModel?>.value())
          as _i7.Future<_i9.UserModel?>);
  @override
  _i7.Future<_i9.UserModel?> isLogin() =>
      (super.noSuchMethod(Invocation.method(#isLogin, []),
              returnValue: Future<_i9.UserModel?>.value())
          as _i7.Future<_i9.UserModel?>);
  @override
  _i7.Future<_i8.LoginResult> login(
          {String? dealerCode,
          String? userUuid,
          String? pin,
          bool? validateOnly = false}) =>
      (super.noSuchMethod(
              Invocation.method(#login, [], {
                #dealerCode: dealerCode,
                #userUuid: userUuid,
                #pin: pin,
                #validateOnly: validateOnly
              }),
              returnValue:
                  Future<_i8.LoginResult>.value(_i8.LoginResult.success))
          as _i7.Future<_i8.LoginResult>);
  @override
  _i7.Future<void> logout() =>
      (super.noSuchMethod(Invocation.method(#logout, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<_i10.DealerInfoModel?> getDealerInfo(String? dealerCode) =>
      (super.noSuchMethod(Invocation.method(#getDealerInfo, [dealerCode]),
              returnValue: Future<_i10.DealerInfoModel?>.value())
          as _i7.Future<_i10.DealerInfoModel?>);
  @override
  _i7.Future<List<_i3.UserLoginModel>> getUsersForDealerCode(
          String? dealerCode) =>
      (super.noSuchMethod(
          Invocation.method(#getUsersForDealerCode, [dealerCode]),
          returnValue: Future<List<_i3.UserLoginModel>>.value(
              <_i3.UserLoginModel>[])) as _i7.Future<List<_i3.UserLoginModel>>);
  @override
  String getStoredDealerCode() =>
      (super.noSuchMethod(Invocation.method(#getStoredDealerCode, []),
          returnValue: '') as String);
  @override
  _i7.Future<void> storeDealerCode(String? dealerCode) =>
      (super.noSuchMethod(Invocation.method(#storeDealerCode, [dealerCode]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> clearDealerCode() =>
      (super.noSuchMethod(Invocation.method(#clearDealerCode, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> deleteLastAccessDate(String? userUid) =>
      (super.noSuchMethod(Invocation.method(#deleteLastAccessDate, [userUid]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  DateTime? getLastAccessDate(String? userUid) =>
      (super.noSuchMethod(Invocation.method(#getLastAccessDate, [userUid]))
          as DateTime?);
  @override
  _i7.Future<_i3.UserLoginModel> create(
          {String? dealerCode,
          String? firstName,
          String? lastName,
          String? pin,
          String? title,
          String? publicDealerUuid,
          String? email,
          String? username,
          String? password,
          String? mobileNumber,
          String? integrationId}) =>
      (super.noSuchMethod(
              Invocation.method(#create, [], {
                #dealerCode: dealerCode,
                #firstName: firstName,
                #lastName: lastName,
                #pin: pin,
                #title: title,
                #publicDealerUuid: publicDealerUuid,
                #email: email,
                #username: username,
                #password: password,
                #mobileNumber: mobileNumber,
                #integrationId: integrationId
              }),
              returnValue:
                  Future<_i3.UserLoginModel>.value(_FakeUserLoginModel_1()))
          as _i7.Future<_i3.UserLoginModel>);
  @override
  _i7.Stream<List<_i11.DealerCodeAccessHistoryModel>>
      streamDealerCodesHistory() =>
          (super.noSuchMethod(Invocation.method(#streamDealerCodesHistory, []),
                  returnValue:
                      Stream<List<_i11.DealerCodeAccessHistoryModel>>.empty())
              as _i7.Stream<List<_i11.DealerCodeAccessHistoryModel>>);
  @override
  _i7.Future<List<_i11.DealerCodeAccessHistoryModel>> getDealerCodesHistory() =>
      (super.noSuchMethod(Invocation.method(#getDealerCodesHistory, []),
          returnValue: Future<List<_i11.DealerCodeAccessHistoryModel>>.value(
              <_i11.DealerCodeAccessHistoryModel>[])) as _i7
          .Future<List<_i11.DealerCodeAccessHistoryModel>>);
  @override
  _i7.Future<void> validateUsernameEmail({String? email, String? username}) =>
      (super.noSuchMethod(
          Invocation.method(
              #validateUsernameEmail, [], {#email: email, #username: username}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<_i9.UserModel?> getMyProfile() =>
      (super.noSuchMethod(Invocation.method(#getMyProfile, []),
              returnValue: Future<_i9.UserModel?>.value())
          as _i7.Future<_i9.UserModel?>);
  @override
  _i7.Future<List<_i12.UserSettingsModel>> getUserSettings() =>
      (super.noSuchMethod(Invocation.method(#getUserSettings, []),
              returnValue: Future<List<_i12.UserSettingsModel>>.value(
                  <_i12.UserSettingsModel>[]))
          as _i7.Future<List<_i12.UserSettingsModel>>);
  @override
  _i7.Future<List<_i12.UserSettingsModel>?> getCachedUserSettings() =>
      (super.noSuchMethod(Invocation.method(#getCachedUserSettings, []),
              returnValue: Future<List<_i12.UserSettingsModel>?>.value())
          as _i7.Future<List<_i12.UserSettingsModel>?>);
}

/// A class which mocks [ConnectivityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivityService extends _i1.Mock
    implements _i13.ConnectivityService {
  MockConnectivityService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Stream<bool> get onlineStream =>
      (super.noSuchMethod(Invocation.getter(#onlineStream),
          returnValue: Stream<bool>.empty()) as _i7.Stream<bool>);
  @override
  _i7.Stream<bool> get offlineStream =>
      (super.noSuchMethod(Invocation.getter(#offlineStream),
          returnValue: Stream<bool>.empty()) as _i7.Stream<bool>);
  @override
  _i7.Future<bool> isOnline() =>
      (super.noSuchMethod(Invocation.method(#isOnline, []),
          returnValue: Future<bool>.value(false)) as _i7.Future<bool>);
  @override
  _i7.Future<bool> isOffline() =>
      (super.noSuchMethod(Invocation.method(#isOffline, []),
          returnValue: Future<bool>.value(false)) as _i7.Future<bool>);
  @override
  _i7.Future<void> validateOnline() =>
      (super.noSuchMethod(Invocation.method(#validateOnline, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<String> networkType() =>
      (super.noSuchMethod(Invocation.method(#networkType, []),
          returnValue: Future<String>.value('')) as _i7.Future<String>);
  @override
  _i7.Future<double> runBandwidthTest(
          {dynamic Function(double, double)? callback}) =>
      (super.noSuchMethod(
          Invocation.method(#runBandwidthTest, [], {#callback: callback}),
          returnValue: Future<double>.value(0.0)) as _i7.Future<double>);
}

/// A class which mocks [DateService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDateService extends _i1.Mock implements _i14.DateService {
  MockDateService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String formatDateTime(DateTime? value,
          {bool? short = false, bool? showSeconds = false}) =>
      (super.noSuchMethod(
          Invocation.method(#formatDateTime, [value],
              {#short: short, #showSeconds: showSeconds}),
          returnValue: '') as String);
  @override
  DateTime dateTimeFromMilliseconds(int? milliseconds, {bool? utc = false}) =>
      (super.noSuchMethod(
          Invocation.method(
              #dateTimeFromMilliseconds, [milliseconds], {#utc: utc}),
          returnValue: _FakeDateTime_2()) as DateTime);
  @override
  String formatDate(DateTime? value) =>
      (super.noSuchMethod(Invocation.method(#formatDate, [value]),
          returnValue: '') as String);
  @override
  String timeAgo(DateTime? value) =>
      (super.noSuchMethod(Invocation.method(#timeAgo, [value]), returnValue: '')
          as String);
  @override
  String duration(Duration? value,
          {bool? forceHour = true, bool? forceMinutes = true}) =>
      (super.noSuchMethod(
          Invocation.method(#duration, [value],
              {#forceHour: forceHour, #forceMinutes: forceMinutes}),
          returnValue: '') as String);
}

/// A class which mocks [DeviceService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceService extends _i1.Mock implements _i15.DeviceService {
  MockDeviceService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i4.DeviceInfoModel> getInfo() =>
      (super.noSuchMethod(Invocation.method(#getInfo, []),
              returnValue:
                  Future<_i4.DeviceInfoModel>.value(_FakeDeviceInfoModel_3()))
          as _i7.Future<_i4.DeviceInfoModel>);
  @override
  _i7.Future<String> getBatteryLevel() =>
      (super.noSuchMethod(Invocation.method(#getBatteryLevel, []),
          returnValue: Future<String>.value('')) as _i7.Future<String>);
  @override
  _i7.Future<String> getPackageVersion() =>
      (super.noSuchMethod(Invocation.method(#getPackageVersion, []),
          returnValue: Future<String>.value('')) as _i7.Future<String>);
  @override
  _i7.Future<String> getPackageBuildNumber() =>
      (super.noSuchMethod(Invocation.method(#getPackageBuildNumber, []),
          returnValue: Future<String>.value('')) as _i7.Future<String>);
}

/// A class which mocks [HttpService].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpService extends _i1.Mock implements _i16.HttpService {
  MockHttpService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i5.HttpResponseModel> get(Uri? uri,
          {Map<String, dynamic>? headers = const {},
          Map<String, dynamic>? params = const {}}) =>
      (super.noSuchMethod(
          Invocation.method(#get, [uri], {#headers: headers, #params: params}),
          returnValue: Future<_i5.HttpResponseModel>.value(
              _FakeHttpResponseModel_4())) as _i7
          .Future<_i5.HttpResponseModel>);
  @override
  _i7.Future<_i5.HttpResponseModel> put(Uri? uri,
          {Map<String, dynamic>? headers = const {},
          Map<String, dynamic>? params = const {},
          dynamic data}) =>
      (super.noSuchMethod(
          Invocation.method(
              #put, [uri], {#headers: headers, #params: params, #data: data}),
          returnValue: Future<_i5.HttpResponseModel>.value(
              _FakeHttpResponseModel_4())) as _i7
          .Future<_i5.HttpResponseModel>);
  @override
  _i7.Future<_i5.HttpResponseModel> post(Uri? uri,
          {Map<String, dynamic>? headers = const {},
          Map<String, dynamic>? params = const {},
          dynamic data}) =>
      (super.noSuchMethod(
          Invocation.method(
              #post, [uri], {#headers: headers, #params: params, #data: data}),
          returnValue: Future<_i5.HttpResponseModel>.value(
              _FakeHttpResponseModel_4())) as _i7
          .Future<_i5.HttpResponseModel>);
  @override
  _i7.Future<_i5.HttpResponseModel> delete(Uri? uri,
          {Map<String, dynamic>? headers = const {},
          Map<String, dynamic>? params = const {}}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #delete, [uri], {#headers: headers, #params: params}),
              returnValue: Future<_i5.HttpResponseModel>.value(
                  _FakeHttpResponseModel_4()))
          as _i7.Future<_i5.HttpResponseModel>);
}

/// A class which mocks [DiskSpace].
///
/// See the documentation for Mockito's code generation for more information.
class MockDiskSpace extends _i1.Mock implements _i17.DiskSpace {
  MockDiskSpace() {
    _i1.throwOnMissingStub(this);
  }
}
