// Mocks generated by Mockito 5.1.0 from annotations
// in truvideo_enterprise/test/service/auth/auth_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:firebase_messaging/firebase_messaging.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:truvideo_enterprise/model/device_info.dart' as _i2;
import 'package:truvideo_enterprise/service/connectivity/_interface.dart'
    as _i4;
import 'package:truvideo_enterprise/service/device/_interface.dart' as _i6;
import 'package:truvideo_enterprise/service/http/_interface.dart' as _i7;
import 'package:truvideo_enterprise/service/http/model/response.dart' as _i3;
import 'package:truvideo_enterprise/service/local/_interface.dart' as _i9;
import 'package:truvideo_enterprise/service/local_db/_interface.dart' as _i8;
import 'package:truvideo_enterprise/service/push_notification/_interface.dart'
    as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeDeviceInfoModel_0 extends _i1.Fake implements _i2.DeviceInfoModel {}

class _FakeHttpResponseModel_1 extends _i1.Fake
    implements _i3.HttpResponseModel {}

/// A class which mocks [ConnectivityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivityService extends _i1.Mock
    implements _i4.ConnectivityService {
  MockConnectivityService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<bool> get onlineStream =>
      (super.noSuchMethod(Invocation.getter(#onlineStream),
          returnValue: Stream<bool>.empty()) as _i5.Stream<bool>);
  @override
  _i5.Stream<bool> get offlineStream =>
      (super.noSuchMethod(Invocation.getter(#offlineStream),
          returnValue: Stream<bool>.empty()) as _i5.Stream<bool>);
  @override
  _i5.Future<bool> isOnline() =>
      (super.noSuchMethod(Invocation.method(#isOnline, []),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<bool> isOffline() =>
      (super.noSuchMethod(Invocation.method(#isOffline, []),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<void> validateOnline() =>
      (super.noSuchMethod(Invocation.method(#validateOnline, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<String> networkType() =>
      (super.noSuchMethod(Invocation.method(#networkType, []),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<double> runBandwidthTest(
          {dynamic Function(double, double)? callback}) =>
      (super.noSuchMethod(
          Invocation.method(#runBandwidthTest, [], {#callback: callback}),
          returnValue: Future<double>.value(0.0)) as _i5.Future<double>);
}

/// A class which mocks [DeviceService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceService extends _i1.Mock implements _i6.DeviceService {
  MockDeviceService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.DeviceInfoModel> getInfo() =>
      (super.noSuchMethod(Invocation.method(#getInfo, []),
              returnValue:
                  Future<_i2.DeviceInfoModel>.value(_FakeDeviceInfoModel_0()))
          as _i5.Future<_i2.DeviceInfoModel>);
  @override
  _i5.Future<String> getBatteryLevel() =>
      (super.noSuchMethod(Invocation.method(#getBatteryLevel, []),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<String> getPackageVersion() =>
      (super.noSuchMethod(Invocation.method(#getPackageVersion, []),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<String> getPackageBuildNumber() =>
      (super.noSuchMethod(Invocation.method(#getPackageBuildNumber, []),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
}

/// A class which mocks [HttpService].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpService extends _i1.Mock implements _i7.HttpService {
  MockHttpService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.HttpResponseModel> get(Uri? uri,
          {Map<String, dynamic>? headers = const {},
          Map<String, dynamic>? params = const {}}) =>
      (super.noSuchMethod(
          Invocation.method(#get, [uri], {#headers: headers, #params: params}),
          returnValue: Future<_i3.HttpResponseModel>.value(
              _FakeHttpResponseModel_1())) as _i5
          .Future<_i3.HttpResponseModel>);
  @override
  _i5.Future<_i3.HttpResponseModel> put(Uri? uri,
          {Map<String, dynamic>? headers = const {},
          Map<String, dynamic>? params = const {},
          dynamic data}) =>
      (super.noSuchMethod(
          Invocation.method(
              #put, [uri], {#headers: headers, #params: params, #data: data}),
          returnValue: Future<_i3.HttpResponseModel>.value(
              _FakeHttpResponseModel_1())) as _i5
          .Future<_i3.HttpResponseModel>);
  @override
  _i5.Future<_i3.HttpResponseModel> post(Uri? uri,
          {Map<String, dynamic>? headers = const {},
          Map<String, dynamic>? params = const {},
          dynamic data}) =>
      (super.noSuchMethod(
          Invocation.method(
              #post, [uri], {#headers: headers, #params: params, #data: data}),
          returnValue: Future<_i3.HttpResponseModel>.value(
              _FakeHttpResponseModel_1())) as _i5
          .Future<_i3.HttpResponseModel>);
  @override
  _i5.Future<_i3.HttpResponseModel> delete(Uri? uri,
          {Map<String, dynamic>? headers = const {},
          Map<String, dynamic>? params = const {}}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #delete, [uri], {#headers: headers, #params: params}),
              returnValue: Future<_i3.HttpResponseModel>.value(
                  _FakeHttpResponseModel_1()))
          as _i5.Future<_i3.HttpResponseModel>);
}

/// A class which mocks [LocalDatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDatabaseService extends _i1.Mock
    implements _i8.LocalDatabaseService {
  MockLocalDatabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> open(String? name) =>
      (super.noSuchMethod(Invocation.method(#open, [name]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> close(String? name) =>
      (super.noSuchMethod(Invocation.method(#close, [name]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> write(String? boxName, String? key, dynamic value) =>
      (super.noSuchMethod(Invocation.method(#write, [boxName, key, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<dynamic> read(String? boxName, String? key) =>
      (super.noSuchMethod(Invocation.method(#read, [boxName, key]),
          returnValue: Future<dynamic>.value()) as _i5.Future<dynamic>);
  @override
  _i5.Future<List<dynamic>> getAll(String? boxName) =>
      (super.noSuchMethod(Invocation.method(#getAll, [boxName]),
              returnValue: Future<List<dynamic>>.value(<dynamic>[]))
          as _i5.Future<List<dynamic>>);
  @override
  _i5.Future<List<String>> getAllKeys(String? boxName) =>
      (super.noSuchMethod(Invocation.method(#getAllKeys, [boxName]),
              returnValue: Future<List<String>>.value(<String>[]))
          as _i5.Future<List<String>>);
  @override
  _i5.Stream<List<dynamic>> streamAll(String? boxName) => (super.noSuchMethod(
      Invocation.method(#streamAll, [boxName]),
      returnValue: Stream<List<dynamic>>.empty()) as _i5.Stream<List<dynamic>>);
  @override
  _i5.Stream<dynamic> streamByKey(String? boxName, String? key) =>
      (super.noSuchMethod(Invocation.method(#streamByKey, [boxName, key]),
          returnValue: Stream<dynamic>.empty()) as _i5.Stream<dynamic>);
  @override
  _i5.Future<void> delete(String? boxName, String? key) =>
      (super.noSuchMethod(Invocation.method(#delete, [boxName, key]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> deleteAll(String? boxName) =>
      (super.noSuchMethod(Invocation.method(#deleteAll, [boxName]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}

/// A class which mocks [LocalService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalService extends _i1.Mock implements _i9.LocalService {
  MockLocalService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> storeBool(String? key, bool? value) =>
      (super.noSuchMethod(Invocation.method(#storeBool, [key, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  bool readBool(String? key, {bool? defaultValue = false}) =>
      (super.noSuchMethod(
          Invocation.method(#readBool, [key], {#defaultValue: defaultValue}),
          returnValue: false) as bool);
  @override
  _i5.Stream<bool> streamBool(String? key, {bool? defaultValue = false}) =>
      (super.noSuchMethod(
          Invocation.method(#streamBool, [key], {#defaultValue: defaultValue}),
          returnValue: Stream<bool>.empty()) as _i5.Stream<bool>);
  @override
  _i5.Future<void> storeString(String? key, String? value) =>
      (super.noSuchMethod(Invocation.method(#storeString, [key, value]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  String readString(String? key, {String? defaultValue = r''}) =>
      (super.noSuchMethod(
          Invocation.method(#readString, [key], {#defaultValue: defaultValue}),
          returnValue: '') as String);
  @override
  _i5.Stream<String> streamString(String? key, {String? defaultValue = r''}) =>
      (super.noSuchMethod(
          Invocation.method(
              #streamString, [key], {#defaultValue: defaultValue}),
          returnValue: Stream<String>.empty()) as _i5.Stream<String>);
  @override
  _i5.Future<void> delete(String? key) =>
      (super.noSuchMethod(Invocation.method(#delete, [key]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}

/// A class which mocks [PushNotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPushNotificationService extends _i1.Mock
    implements _i10.PushNotificationService {
  MockPushNotificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<_i11.RemoteMessage> get onMessage =>
      (super.noSuchMethod(Invocation.getter(#onMessage),
              returnValue: Stream<_i11.RemoteMessage>.empty())
          as _i5.Stream<_i11.RemoteMessage>);
  @override
  _i5.Stream<_i11.RemoteMessage> get onMessageOpenedApp =>
      (super.noSuchMethod(Invocation.getter(#onMessageOpenedApp),
              returnValue: Stream<_i11.RemoteMessage>.empty())
          as _i5.Stream<_i11.RemoteMessage>);
  @override
  _i5.Stream<String?> get tokenStream =>
      (super.noSuchMethod(Invocation.getter(#tokenStream),
          returnValue: Stream<String?>.empty()) as _i5.Stream<String?>);
  @override
  _i5.Future<bool> hasPermission() =>
      (super.noSuchMethod(Invocation.method(#hasPermission, []),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<bool> requestPermission() =>
      (super.noSuchMethod(Invocation.method(#requestPermission, []),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<String?> updateToken() =>
      (super.noSuchMethod(Invocation.method(#updateToken, []),
          returnValue: Future<String?>.value()) as _i5.Future<String?>);
  @override
  _i5.Future<_i11.RemoteMessage?> getInitialMessage() =>
      (super.noSuchMethod(Invocation.method(#getInitialMessage, []),
              returnValue: Future<_i11.RemoteMessage?>.value())
          as _i5.Future<_i11.RemoteMessage?>);
  @override
  _i5.Future<String> getToken() =>
      (super.noSuchMethod(Invocation.method(#getToken, []),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<void> revokeToken() =>
      (super.noSuchMethod(Invocation.method(#revokeToken, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}
